plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagement"
    id 'java'
    id 'jacoco'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(23)
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    configurations {
        compileOnly.extendsFrom annotationProcessor
        testCompileOnly.extendsFrom annotationProcessor
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    // tests configuration
    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
    tasks.named('jacocoTestReport') {
        dependsOn test
    }
    jacoco {
        toolVersion = "$jacocoVersion"
    }

    // enable preview features
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += "--enable-preview"
    }
    tasks.withType(Test).configureEach {
        jvmArgs += "--enable-preview"
    }
    tasks.withType(JavaExec).configureEach {
        jvmArgs += "--enable-preview"
    }

    // JVM memory tuning
    tasks.withType(JavaExec).each {
        it.jvmArgs([
                '-XX:+HeapDumpOnOutOfMemoryError',
                '-XX:MaxMetaspaceSize=128m',
                '-Xmx512m',
        ])
    }
}

tasks.register('buildAll') {
    group = 'build'
    dependsOn ':financier-core-domain:build'
    dependsOn ':financier-core-usecase-api:build'
    dependsOn ':financier-core-usecase-impl:build'
    dependsOn ':financier-port-exchange:build'
    dependsOn ':financier-port-gateway:build'
    dependsOn ':financier-port-repository:build'
    dependsOn ':financier-app:build'
}
